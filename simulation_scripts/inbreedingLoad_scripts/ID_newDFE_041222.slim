initialize() {
	// for computational efficiency, dont model neutral(synonymous) mutations here and rescale mutation rate accordingly
	// Huber et al 2017 estimate a 1:2.31 ratio of synonymous to nonsynonymous mutations
	// neutral mutations could be added in by removing rescaling factor and adding in a neutral mutation type below
	// or by using tree sequences - see SLiM manual for details on tree sequence recording
	initializeMutationRate(1.5e-8*2.31/3.31);
	defineConstant("sampleSize", 100); //for sampling the pop for summary stats	
	
	// set dominance coefficients for different deleterious mutation types
	defineConstant("h_wkDel", 0.45);
	defineConstant("h_modDel", 0.2);
	defineConstant("h_strDel", 0.05);
	defineConstant("h_sublet", 0.0);
	defineConstant("h_let", 0.0);
	
	// set up discrete DFE with four mutation types coming from gamma DFE
	// augmented with recessive lethals
	// note that this discrete approach differs from other models, but is preferable since it is much faster
	// compared to using mutationEffect callbacks
	initializeMutationType("m1", h_wkDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.001); return x;");
	initializeMutationType("m2", h_modDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.01 | x >= -0.001); return x;");
	initializeMutationType("m3", h_strDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.1 | x >= -0.01); return x;");
	initializeMutationType("m4", h_sublet, "s", "do x=rgamma(1,-0.01314833,0.186); while (x >= -0.1); return x;");
	initializeMutationType("m5", h_let,"f", -1.0);
	
	// proportion of new deleterious mutations that are recessive lethal
	defineConstant("let_frac", 0.003);
	
	// set ratio of mutation types according to DFE proportions, accouting for 0.3% lethals
	initializeGenomicElementType("g1", c(m1,m2,m3,m4,m5), c(0.491*(1-let_frac), 0.247*(1-let_frac), 0.236*(1-let_frac), 0.026*(1-let_frac), let_frac));
	
	
	// set up 22 autosomes, each with gene_num # of genes
	// set gene_num to result in 20,000-25,000 genes (Keightley 2012 doi: 10.1534/genetics.111.134668)
	gene_num=1023;
	
	gene_vec=rep(gene_num,22);
	
	//assume gene length of 1340bp (Keightley 2012 doi: 10.1534/genetics.111.134668)
	//resulting in total sequence length of 26.8-33.5 Mb
	defineConstant("geneLength", 1340);
	
	defineConstant("seqLength", sum(gene_vec)*geneLength);
	
	gene_num=sum(gene_vec);
	
	for (i in 1:gene_num){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}
	
	rates=NULL;
	
	//assume no recombination within genes, a rate of 1e-3 between genes, and free recombination between chroms
	for (i in 1:(size(gene_vec)-1)){
		rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[size(gene_vec)-1]-1)));
	
	ends=NULL;
	for (i in 1:gene_num){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];
	
	initializeRecombinationRate(rates, ends);

}

///
/// Demography:
/// parameters here taken Kim 2017 1kG model 
/// in tables S1 and S2
/// parameters scaled in terms of diploids and generations

1 early() {
	sim.addSubpop("p1", 12378);
	cat("gen,popSize,B,B_01,B_099" + "\n");
	m1.convertToSubstitution = T;
}


//bottleneck to 1048 for 248 generations
10000 early() {
	p1.setSubpopulationSize(1048);
	m1.convertToSubstitution = T;
}

// population growth to 13625 for 1744 generations
10248 early() {
	p1.setSubpopulationSize(13625);
}

// exponential growth for final 497 generations
// to current population size of 659551
11992:12489 early() {
	t = sim.cycle - 11992;
	p1_size = round(13625 * (1 + 0.007831051)^t);
	p1.setSubpopulationSize(asInteger(p1_size));
}

// output stats every 100 generations and at the last generation
1:12489 late() {
	if (sim.cycle % 100 == 0 | sim.cycle==12489) {
		stats = getStats(p1, sampleSize);
		cat(sim.cycle + "," + p1.individuals.size() + "," + stats  + "\n");
	
	}

}

// this function outputs inbreeding load partitioned into different s bins
function (s) getStats(o pop, i sampSize)
{
	i = sample(pop.individuals, sampSize, F);
	
	//initialize vectors
	B_pop = c();
	B_pop_01 = c();
	B_pop_099 = c();
	
	
	for (individual in i) {
		
		del_muts = c(individual.genomes.mutationsOfType(m1),individual.genomes.mutationsOfType(m2),individual.genomes.mutationsOfType(m3),individual.genomes.mutationsOfType(m4),individual.genomes.mutationsOfType(m5));
		
		B_ind = c();
		B_ind_01 = c();
		B_ind_099 = c();
		
		
		if (del_muts.length()>0) {
			for(m in del_muts){
				//check if mut is heterozygous
				if(individual.genomes.mutationCountsInGenomes(m)==1){
					//protect against case where s < -1 (can happen with gamma DFE)
					s = max(m.selectionCoeff,-1.0);
					h = m.mutationType.dominanceCoeff;
					//difference in fitness between het and hom is s*(h-1) (1+sh -(1+s))
					B_ind = c(B_ind, s*(h-1));
					
					
					// get 2B only for mutations with s <= -0.1
					if(m.selectionCoeff <= -0.1){
						s = max(m.selectionCoeff,-1.0);
						//difference in fitness between het and hom is s*(h-1) (1+sh -(1+s))
						B_ind_01 = c(B_ind_01, s*(h-1));
					}
					else{
						B_ind_01 = c(B_ind_01,0.0);
					}
					
					
					// get 2B only for mutations with s <= -0.99
					if(m.selectionCoeff <= -0.99){
						s = max(m.selectionCoeff,-1.0);
						//difference in fitness between het and hom is s*(h-1) (1+sh -(1+s))
						B_ind_099 = c(B_ind_099, s*(h-1));
					}
					else{
						B_ind_099 = c(B_ind_099,0.0);
					}
				}
			}
			//this is summed rather than multiplied
			//even if fitness is multiplicative 
			B_pop = c(B_pop, sum(B_ind));
			B_pop_01 = c(B_pop_01, sum(B_ind_01));
			B_pop_099 = c(B_pop_099, sum(B_ind_099));
		
		
		}
		else{
			B_pop = c(B_pop, 0.0);
			B_pop_01 = c(B_pop_01, 0.0);
			B_pop_099 = c(B_pop_099, 0.0);
		
		
		}
	
	}
	
	return(mean(B_pop) + "," + mean(B_pop_01) + "," + mean(B_pop_099));
}
