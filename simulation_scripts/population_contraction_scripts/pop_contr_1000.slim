// script for using Kyriazis 2023 model to simulate a population contraction

initialize() {

	// for computational efficiency, dont model neutral(synonymous) mutations here and rescale mutation rate accordingly
	// Huber et al 2017 estimate a 1:2.31 ratio of synonymous to nonsynonymous mutations
	// neutral mutations could be added in by removing rescaling factor and adding in a neutral mutation type below
	// or by using tree sequences - see SLiM manual for details on tree sequence recording
	initializeMutationRate(1.5e-8*2.31/3.31);
	
	// set dominance coefficients for different deleterious mutation types
	defineConstant("h_wkDel", 0.45);
	defineConstant("h_modDel", 0.2);
	defineConstant("h_strDel", 0.05);
	defineConstant("h_semiLet", 0.0);
	defineConstant("h_let", 0.0);
	
	// set up discrete DFE with four mutation types coming from gamma DFE
	// augmented with recessive lethals
	// this approach for implementing an h-s relationship is much faster than using fitness callbacks in SLiM (see manual)
	initializeMutationType("m1", h_wkDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.001); return x;");
	initializeMutationType("m2", h_modDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.01 | x >= -0.001); return x;");
	initializeMutationType("m3", h_strDel, "s", "do x=rgamma(1,-0.01314833,0.186); while (x < -0.1 | x >= -0.01); return x;");
	initializeMutationType("m4", h_semiLet, "s", "do x=rgamma(1,-0.01314833,0.186); while (x >= -0.1); return x;");
	initializeMutationType("m5", h_let,"f", -1.0);
	
	// proportion of new deleterious mutations that are recessive lethal
	defineConstant("let_frac", 0.003);
	
	// set proportion of each mutation type as determined by Kim 2017 DFE augmented with lethals
	initializeGenomicElementType("g1", c(m1,m2,m3,m4,m5), c(0.491*(1-let_frac), 0.247*(1-let_frac), 0.236*(1-let_frac), 0.026*(1-let_frac), let_frac));
	
	defineConstant("sampleSize", 100); //for sampling the pop for summary stats	

	
	// set up 22 autosomes, each with gene_num # of genes
	// set gene_num to result in ~22,500 genes (Keightley 2012 doi: 10.1534/genetics.111.134668)
	gene_num=1023;
	
	// 22 here sets the number of autosomes - can decrease to speed up simulations or run in parallel
	gene_vec=rep(gene_num,22);
	
	//assume gene length of 1340bp (Keightley 2012 doi: 10.1534/genetics.111.134668)
	defineConstant("geneLength", 1340);
	
	defineConstant("seqLength", sum(gene_vec)*geneLength);
	
	gene_num=sum(gene_vec);
	
	for (i in 1:gene_num){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}
	
	rates=NULL;
	
	//assume no recombination within genes, a rate of 1e-3 between genes, and free recombination between chroms
	for (i in 1:(size(gene_vec)-1)){
		rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[size(gene_vec)-1]-1)));
	
	ends=NULL;
	for (i in 1:gene_num){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];
	
	initializeRecombinationRate(rates, ends);
}


// simple constant size demography with N=5000
// can make this demography arbitrarily complex as described in the SLiM manual
1  early() {
	sim.addSubpop("p1", 20000);
	cat("gen,popSize,genLoad,inbLoad,lethal_seg,sublet_seg,strDel_seg,modDel_seg,wkDel_seg,lethal_fix,sublet_fix,strDel_fix,modDel_fix,wkDel_fix,  " + "\n");

	// keep fixed mutations to model drift load
	// removing them (changing this to "T") would speed up simulation
	// but ignore effect of fixed mutations
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
	m5.convertToSubstitution = F;

}

5000 early() {
	p1.setSubpopulationSize(1000);
}


// run simulation for 10*N generations
// long enough for weakly deleterious mutations to reach equilibrium
1:5000 early(){
	// output statistics every 1000 generations
	if (sim.cycle % 1000 == 0) {
		
		//get segregating muts
		muts=sim.mutations;
		freq = p1.genomes.mutationFrequenciesInGenomes(muts);
		seg = muts[freq != 1.0];
		
		lethal_seg = muts[muts.selectionCoeff==-1];
		sublet_seg = muts[muts.selectionCoeff > -1 & muts.selectionCoeff <= -0.1 ];
		strDel_seg = muts[muts.selectionCoeff <= -0.01 & muts.selectionCoeff > -0.1 ];
		modDel_seg = muts[muts.selectionCoeff <= -0.001 & muts.selectionCoeff > -0.01 ];
		wkDel_seg = muts[muts.selectionCoeff > -0.001];
		
		//get fixed muts
		fixed = muts[freq == 1.0];
		
		lethal_fix = fixed[fixed.selectionCoeff==-1];
		sublet_fix = fixed[fixed.selectionCoeff > -1 & fixed.selectionCoeff <= -0.1 ];
		strDel_fix = fixed[fixed.selectionCoeff <= -0.01 & fixed.selectionCoeff > -0.1 ];
		modDel_fix = fixed[fixed.selectionCoeff <= -0.001 & fixed.selectionCoeff > -0.01 ];
		wkDel_fix = fixed[fixed.selectionCoeff > -0.001];
		
		// get load as 1 - fitness
		// SLiM calculates fitness multiplicatively each generation and caches it
		genetic_load = 1-mean(p1.cachedFitness(NULL));
		
		// calculate inbreeding load
		q = p1.genomes.mutationFrequenciesInGenomes(muts);
		s = -muts.selectionCoeff;

		// replace mutations with s>1.0 with 1.0 (can happen when drawing from gamma distribution)
		s[s>1.0]=1.0;
		
		// get h for each mutation
		// note that this will not work if changing h using fitness callbacks
		h=muts.mutationType.dominanceCoeff;
		
		// calculate number of diploid lethal equivalents (2B or inbreeding load)
		// equation from Morton et al 1956
		// note that this equation assumes random mating
		inbreeding_load = 2*(sum(q*s)-sum(q^2*s)-2*sum(q*(1-q)*s*h));
		
		
		catn(sim.cycle + "," + p1.individuals.size() + "," + genetic_load + "," + inbreeding_load + "," + lethal_seg.length()  + "," + sublet_seg.length() + "," + strDel_seg.length() + "," + modDel_seg.length() + "," + wkDel_seg.length() + "," + lethal_fix.length() + "," + sublet_fix.length() + "," + strDel_fix.length() + "," + modDel_fix.length() + "," + wkDel_fix.length());
	
	}
}

5001:10000 early(){
	// output statistics every 10 generations
	if (sim.cycle % 10 == 0) {
		
		//get segregating muts
		muts=sim.mutations;
		freq = p1.genomes.mutationFrequenciesInGenomes(muts);
		seg = muts[freq != 1.0];
		
		lethal_seg = muts[muts.selectionCoeff==-1];
		sublet_seg = muts[muts.selectionCoeff > -1 & muts.selectionCoeff <= -0.1 ];
		strDel_seg = muts[muts.selectionCoeff <= -0.01 & muts.selectionCoeff > -0.1 ];
		modDel_seg = muts[muts.selectionCoeff <= -0.001 & muts.selectionCoeff > -0.01 ];
		wkDel_seg = muts[muts.selectionCoeff > -0.001];
		
		//get fixed muts
		fixed = muts[freq == 1.0];
		
		lethal_fix = fixed[fixed.selectionCoeff==-1];
		sublet_fix = fixed[fixed.selectionCoeff > -1 & fixed.selectionCoeff <= -0.1 ];
		strDel_fix = fixed[fixed.selectionCoeff <= -0.01 & fixed.selectionCoeff > -0.1 ];
		modDel_fix = fixed[fixed.selectionCoeff <= -0.001 & fixed.selectionCoeff > -0.01 ];
		wkDel_fix = fixed[fixed.selectionCoeff > -0.001];
		
		// get load as 1 - fitness
		// SLiM calculates fitness multiplicatively each generation and caches it
		genetic_load = 1-mean(p1.cachedFitness(NULL));
		
		// calculate inbreeding load
		q = p1.genomes.mutationFrequenciesInGenomes(muts);
		s = -muts.selectionCoeff;

		// replace mutations with s>1.0 with 1.0 (can happen when drawing from gamma distribution)
		s[s>1.0]=1.0;
		
		// get h for each mutation
		// note that this will not work if changing h using fitness callbacks
		h=muts.mutationType.dominanceCoeff;
		
		// calculate number of diploid lethal equivalents (2B or inbreeding load)
		// equation from Morton et al 1956
		// note that this equation assumes random mating
		inbreeding_load = 2*(sum(q*s)-sum(q^2*s)-2*sum(q*(1-q)*s*h));
		
		
		catn(sim.cycle + "," + p1.individuals.size() + "," + genetic_load + "," + inbreeding_load + "," + lethal_seg.length()  + "," + sublet_seg.length() + "," + strDel_seg.length() + "," + modDel_seg.length() + "," + wkDel_seg.length() + "," + lethal_fix.length() + "," + sublet_fix.length() + "," + strDel_fix.length() + "," + modDel_fix.length() + "," + wkDel_fix.length());
	
	}
}


